module mpv @private;

extern fn CULong mpv_client_api_version();

extern fn ZString mpv_error_string(MpvError error);

extern fn void mpv_free(void* data);

extern fn ZString mpv_client_name(Mpv ctx);

extern fn long mpv_client_id(Mpv ctx);

extern fn Mpv mpv_create();

extern fn MpvError mpv_initialize(Mpv ctx);

extern fn void mpv_destroy();

extern fn void mpv_terminate_destroy(Mpv ctx);

extern fn Mpv mpv_create_client(Mpv ctx, ZString name);

extern fn Mpv mpv_create_weak_client(Mpv ctx, ZString name);

extern fn MpvError mpv_load_config_file(Mpv ctx, ZString filename);

extern fn long mpv_get_time_ns(Mpv ctx);

extern fn long mpv_get_time_us(Mpv ctx);

extern fn void mpv_free_node_contents(MpvNode* node);

extern fn MpvError mpv_set_option(Mpv ctx, ZString name, MpvFormat format, void* data);

extern fn MpvError mpv_set_option_string(Mpv ctx, ZString name, ZString data);

extern fn MpvError mpv_command(Mpv ctx, ZString* args);

extern fn MpvError mpv_command_node(Mpv ctx, MpvNode* args, MpvNode* result);

extern fn MpvError mpv_command_ret(Mpv ctx, ZString* args, MpvNode* result);

extern fn MpvError mpv_command_string(Mpv ctx, ZString* args);

extern fn MpvError mpv_command_async(Mpv ctx, MpvUserdata reply_userdata, ZString* args);

extern fn MpvError mpv_command_node_async(Mpv ctx, MpvUserdata reply_userdata, MpvNode* args);

extern fn void mpv_abort_async_command(Mpv ctx, MpvUserdata reply_userdata);

extern fn MpvError mpv_set_property(Mpv ctx, ZString name, MpvFormat format, void* data);

extern fn MpvError mpv_set_property_string(Mpv ctx, ZString name, ZString data);

extern fn MpvError mpv_del_property(Mpv ctx, ZString name);

extern fn MpvError mpv_set_property_async(Mpv ctx, MpvUserdata reply_userdata, ZString name, MpvFormat format, void *data);

extern fn MpvError mpv_get_property(Mpv ctx, ZString name, MpvFormat format, void *data);

extern fn ZString mpv_get_property_string(Mpv ctx, ZString name);

extern fn ZString mpv_get_property_osd_string(Mpv ctx, ZString name);

extern fn MpvError mpv_get_property_async(Mpv ctx, MpvUserdata reply_userdata, ZString name, MpvFormat format);

extern fn MpvError mpv_observe_property(Mpv mpv, MpvUserdata reply_userdata, ZString name, MpvFormat format);

extern fn MpvError mpv_unobserve_property(Mpv mpv, MpvUserdata registered_reply_userdata);

extern fn ZString mpv_event_name(MpvEventId event);

extern fn MpvError mpv_event_to_node(MpvNode* dst, MpvEvent* src);

extern fn MpvError mpv_request_event(Mpv ctx, MpvEventId event, MpvBool enable);

extern fn MpvError mpv_request_log_messages(Mpv ctx, ZString min_level);

extern fn MpvEvent* mpv_wait_event(Mpv ctx, double timeout);

extern fn void mpv_wakeup(Mpv ctx);

extern fn void mpv_set_wakeup_callback(Mpv ctx, MpvCallback cb, void *d);

extern fn void mpv_wait_async_requests(Mpv ctx);

extern fn MpvError mpv_hook_add(Mpv ctx, MpvUserdata reply_userdata, ZString name, CInt priority);

extern fn MpvError mpv_hook_continue(Mpv ctx, ulong id);

